{"version":3,"sources":["components/layout/index.tsx","components/map/point.tsx","components/map/index.tsx","components/point-list/index.tsx","components/point-form/index.tsx","app.tsx","service-worker.ts","index.tsx"],"names":["Layout","props","controller","map","className","placemarkOptions","draggable","hideIconOnBalloonOpen","placemarkModules","MapPoint","id","title","place","onChangePointPlace","onDragend","useCallback","event","newPlace","originalEvent","target","geometry","getCoordinates","properties","balloonContent","options","modules","Map","center","zoom","points","onChangeMapCenter","onDragendMap","newCenter","getCenter","width","height","defaultState","onActionend","point","key","PointList","list","onRemove","onReorder","onClick","pointId","value","onDragEnd","result","destination","index","source","startIndex","endIndex","Array","from","splice","removed","reorder","droppableId","provided","droppableProps","ref","innerRef","draggableId","isDragDisabled","subprovided","draggableProps","dragHandleProps","type","name","area-label","placeholder","PointForm","onCreate","useState","setTitle","onChangeTitle","onSubmit","preventDefault","Math","random","toString","onChange","App","setPoints","mapCenter","setMapCenter","onAdd","concat","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca7f03df.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\ninterface LayoutProps {\n  controller?: React.ReactNode,\n  map?: React.ReactNode,\n}\n\nconst Layout: React.FC<LayoutProps> = (props: LayoutProps) => {\n  const {\n    controller = null,\n    map = null,\n  } = props;\n\n  return (\n    <div className=\"layout\">\n      <aside className=\"layout--controller\">\n        {controller}\n      </aside>\n      <section className=\"layout--map\">\n        {map}\n      </section>\n    </div>\n  );\n};\n\nexport default Layout;\n","import React, { useCallback } from 'react';\nimport {\n  Placemark,\n} from 'react-yandex-maps';\nimport { Point } from '../../types';\n\nconst placemarkOptions = {\n  draggable: true,\n  hideIconOnBalloonOpen: true,\n};\n\nconst placemarkModules = ['geoObject.addon.balloon', 'geoObject.addon.hint'];\n\ninterface MapPointProps extends Point {\n  onChangePointPlace?: (id: string, place: [number, number]) => void,\n}\n\nconst MapPoint: React.FC<MapPointProps> = (props: MapPointProps) => {\n  const {\n    id,\n    title,\n    place,\n    onChangePointPlace = () => {},\n  } = props;\n\n  const onDragend = useCallback((event: any): void => {\n    const newPlace: [number, number] = event.originalEvent.target.geometry.getCoordinates();\n    onChangePointPlace(id, newPlace);\n  }, [id, onChangePointPlace]);\n\n  return (\n    <Placemark\n      geometry={place}\n      properties={{ balloonContent: title }}\n      options={placemarkOptions}\n      modules={placemarkModules}\n      onDragend={onDragend}\n    />\n  );\n};\n\nexport default MapPoint;\n","import React, { useCallback } from 'react';\nimport {\n  YMaps,\n  Map as YMap,\n  Polyline,\n} from 'react-yandex-maps';\nimport MapPoint from './point';\nimport { Point } from '../../types';\n\ninterface MapProps {\n  children?: React.ReactNode,\n  center: [number, number],\n  zoom?: number,\n  points?: Array<Point>,\n  onChangeMapCenter?: (center: [number, number]) => void,\n  onChangePointPlace?: (id: string, place: [number, number]) => void,\n}\n\nconst Map: React.FC<MapProps> = (props: MapProps) => {\n  const {\n    center,\n    zoom = 10,\n    points = [],\n    onChangeMapCenter = () => {},\n    onChangePointPlace = () => {},\n  } = props;\n\n  const onDragendMap = useCallback((event: any): void => {\n    const newCenter: [number, number] = event.originalEvent.target.getCenter();\n    onChangeMapCenter(newCenter);\n  }, [onChangeMapCenter]);\n\n  return (\n    <YMaps>\n      <YMap\n        width=\"100%\"\n        height=\"100%\"\n        defaultState={{ center, zoom }}\n        onActionend={onDragendMap}\n      >\n        {points.map((point: Point) => (\n          <MapPoint\n            key={point.id}\n            id={point.id}\n            title={point.title}\n            place={point.place}\n            onChangePointPlace={onChangePointPlace}\n          />\n        ))}\n        <Polyline geometry={points.map(({ place }: Point) => place)} />\n      </YMap>\n    </YMaps>\n  );\n};\n\nexport default Map;\n","import React, { useCallback } from 'react';\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n} from 'react-beautiful-dnd';\nimport { Point } from '../../types';\nimport './index.css';\n\nfunction reorder<T>(list: Array<T>, startIndex: number, endIndex: number): Array<T> {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n}\n\ninterface PointListProps {\n  list?: Array<Point>,\n  draggable?: boolean,\n  onRemove?: (pointId: string) => void,\n  onReorder?: (list: Array<Point>) => void,\n}\n\nconst PointList: React.FC<PointListProps> = (props: PointListProps) => {\n  const {\n    list = [],\n    draggable = false,\n    onRemove = () => {},\n    onReorder = () => {},\n  } = props;\n\n  const onClick = useCallback((event: React.MouseEvent): void => {\n    const target = event.target as HTMLInputElement;\n    const pointId: string = target.value;\n    onRemove(pointId);\n  }, [onRemove]);\n\n  const onDragEnd = useCallback((result: any): void => {\n    if (!result.destination) {\n      return;\n    }\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n    onReorder(reorder<Point>(list, result.source.index, result.destination.index));\n  }, [list, onReorder]);\n\n  /* eslint-disable react/jsx-props-no-spreading */\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"list\">\n        {provided => (\n          <ul\n            className=\"list\"\n            {...provided.droppableProps}\n            ref={provided.innerRef}\n          >\n            {list.map((point: Point, index: number) => (\n              <Draggable\n                key={point.id}\n                draggableId={point.id}\n                index={index}\n                isDragDisabled={!draggable}\n              >\n                {subprovided => (\n                  <li\n                    className=\"list--item\"\n                    {...subprovided.draggableProps}\n                    {...subprovided.dragHandleProps}\n                    ref={subprovided.innerRef}\n                  >\n                    <span className=\"list--content\">\n                      {point.title}\n                    </span>\n                    <button\n                      className=\"list--button\"\n                      type=\"button\"\n                      name=\"remove\"\n                      value={point.id}\n                      title=\"Удалить\"\n                      area-label=\"Удалить\"\n                      onClick={onClick}\n                    >\n                      x\n                    </button>\n                  </li>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </ul>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n  /* eslint-enable react/jsx-props-no-spreading */\n};\n\nexport default PointList;\nexport {\n  reorder,\n};\n","import React, { useState, useCallback } from 'react';\nimport { Point } from '../../types';\nimport './index.css';\n\ninterface PointFormProps {\n  place: [number, number],\n  onCreate?: (point: Point) => void,\n}\n\nconst PointForm: React.FC<PointFormProps> = (props: PointFormProps) => {\n  const {\n    place,\n    onCreate = () => {},\n  } = props;\n\n  const [title, setTitle] = useState<string>('');\n\n  const onChangeTitle = useCallback((event: React.FormEvent): void => {\n    const target = event.target as HTMLInputElement;\n    setTitle(target.value);\n  }, []);\n\n  const onSubmit = useCallback((event: React.FormEvent): void => {\n    event.preventDefault();\n    if (!title) {\n      return;\n    }\n    const point: Point = {\n      id: Math.random().toString(),\n      title,\n      place,\n    };\n    setTitle('');\n    onCreate(point);\n  }, [title, place, onCreate]);\n\n  return (\n    <form className=\"form\" name=\"point\" onSubmit={onSubmit}>\n      <fieldset>\n        <legend>\n          Добавить точку маршрута\n        </legend>\n        <div className=\"form--group\">\n          <input\n            name=\"title\"\n            value={title}\n            placeholder=\"Введите название\"\n            area-label=\"Введите название\"\n            onChange={onChangeTitle}\n          />\n          <button\n            name=\"create\"\n            type=\"submit\"\n            title=\"Добавить\"\n            area-label=\"Добавить\"\n          >\n            &crarr;\n          </button>\n        </div>\n      </fieldset>\n    </form>\n  );\n};\n\nexport default PointForm;\n","import React, { useState, useCallback } from 'react';\nimport Layout from './components/layout';\nimport Map from './components/map';\nimport PointList from './components/point-list';\nimport PointForm from './components/point-form';\nimport { Point } from './types';\nimport './app.css';\n\nconst App: React.FC = () => {\n  const [points, setPoints] = useState<Array<Point>>([]);\n\n  const [mapCenter, setMapCenter] = useState<[number, number]>([55.75, 37.57]);\n\n  const onAdd = useCallback((point: Point): void => {\n    setPoints(points.concat(point));\n  }, [points]);\n\n  const onRemove = useCallback((pointId): void => {\n    setPoints(points.filter(({ id }: Point) => id !== pointId));\n  }, [points]);\n\n  const onReorder = useCallback((list: Array<Point>): void => {\n    setPoints(list);\n  }, []);\n\n  const onChangeMapCenter = useCallback((center: [number, number]): void => {\n    setMapCenter(center);\n  }, []);\n\n  const onChangePointPlace = useCallback((id: string, place: [number, number]): void => {\n    setPoints(points.map(\n      (point: Point) => ((point.id === id) ? { ...point, place } : point),\n    ));\n  }, [points]);\n\n  return (\n    <Layout\n      controller={(\n        <>\n          <PointForm place={mapCenter} onCreate={onAdd} />\n          <PointList list={points} draggable onRemove={onRemove} onReorder={onReorder} />\n        </>\n      )}\n      map={(\n        <Map\n          center={mapCenter}\n          zoom={12}\n          points={points}\n          onChangeMapCenter={onChangeMapCenter}\n          onChangePointPlace={onChangePointPlace}\n        />\n      )}\n    />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './service-worker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}